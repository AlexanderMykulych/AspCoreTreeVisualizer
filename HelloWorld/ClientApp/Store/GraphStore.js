import Vue from "vue";
import { getStoreAccessors } from "vuex-typescript";
import _ from "lodash";
import { uniqId } from "../mixins/IdGenerator";
export var graphModule = {
    namespaced: true,
    state: {
        Graphs: [],
        Characteristics: [
            {
                Name: "Char 1",
                Values: [{
                        Id: uniqId(),
                        Name: "Char 1. Value 1"
                    }, {
                        Id: uniqId(),
                        Name: "Char 1. Value 2"
                    }]
            },
            {
                Name: "Char 2",
                Values: [{
                        Id: uniqId(),
                        Name: "Char 2. Value 1"
                    }, {
                        Id: uniqId(),
                        Name: "Char 2. Value 2"
                    }, {
                        Id: uniqId(),
                        Name: "Char 2. Value 3"
                    }
                ]
            },
            {
                Name: "Char 3",
                Values: [{
                        Id: uniqId(),
                        Name: "Char 3. Value 1"
                    }, {
                        Id: uniqId(),
                        Name: "Char 3. Value 2"
                    }, {
                        Id: uniqId(),
                        Name: "Char 3. Value 3"
                    }, {
                        Id: uniqId(),
                        Name: "Char 3. Value 4"
                    }, {
                        Id: uniqId(),
                        Name: "Char 3. Value 5"
                    }, {
                        Id: uniqId(),
                        Name: "Char 3. Value 6"
                    }, {
                        Id: uniqId(),
                        Name: "Char 3. Value 7"
                    }, {
                        Id: uniqId(),
                        Name: "Char 3. Value 8"
                    }, {
                        Id: uniqId(),
                        Name: "Char 3. Value 9"
                    }
                ]
            }
        ],
        Roles: [
            {
                Id: uniqId(),
                Name: "Role 1"
            },
            {
                Id: uniqId(),
                Name: "Role 2"
            },
            {
                Id: uniqId(),
                Name: "Role 3"
            }
        ]
    },
    getters: {
        getGraph: function (state) {
            return state.Graphs;
        },
        graphCount: function (state) {
            return state.Graphs.length;
        },
        getSyncfusionGraphByName: function (state) {
            return function (name) {
                var graph = _.first(state.Graphs.filter(function (x) { return x.Name === name; }));
                return graphModule.getters.getSyncfusiongGraphByGraph(state)(graph);
            };
        },
        getSyncfusiongGraphByGraph: function (state) {
            return function (graph) {
                return {
                    Name: graph.Name,
                    Nodes: graph.Points,
                    Connectors: _.map(graph.Dependencies, function (con) {
                        return _.merge({
                            name: con.Name,
                            sourceNode: con.Start ? con.Start.name : null,
                            targetNode: con.End ? con.End.name : null
                        }, con);
                    })
                };
            };
        },
        getCharacteristicsList: function (state) {
            return state.Characteristics;
        },
        getRoles: function (state) {
            return state.Roles;
        }
    },
    mutations: {
        addGraph: function (state, item) {
            state.Graphs.push(item);
        },
        addPoint: function (state, item) {
            var graph = _.find(state.Graphs, function (x) { return x.Name === item.graph; });
            var duplicatePointIndex = _.findIndex(graph.Points, function (x) { return x.name === item.point.name; });
            if (duplicatePointIndex < 0) {
                graph.Points.push(item.point);
            }
            else {
                var duplicatePoint = graph.Points[duplicatePointIndex];
                _.assign(duplicatePoint, item.point);
                graph.Points.splice(duplicatePointIndex, 1, duplicatePoint);
            }
        },
        addDependency: function (state, item) {
            //TODO: Применить измение к диаграме
            var graph = _.find(state.Graphs, function (x) { return x.Name === item.graph; });
            var duplicateDepIndex = _.findIndex(graph.Dependencies, function (x) { return x.Name === item.dep.Name; });
            if (duplicateDepIndex < 0) {
                graph.Dependencies.push(item.dep);
            }
            else {
                var duplicateDep = graph.Dependencies[duplicateDepIndex];
                _.assign(duplicateDep, item.dep);
                graph.Dependencies.splice(duplicateDepIndex, 1, duplicateDep);
            }
        },
        changeNodeProperty: function (state, item) {
            var points = _.find(state.Graphs, function (x) { return x.Name === item.graph; }).Points;
            var point = _.find(points, function (x) { return x.name === item.name; });
            Vue.set(point, item.propName, item.newValue);
        },
        removeConnection: function (state, options) {
            var graph = _.find(state.Graphs, function (x) { return x.Name === options.graph; });
            _.remove(graph.Dependencies, function (x) { return x.Name === options.connectorName; });
        },
        removeNode: function (state, options) {
            var graph = _.find(state.Graphs, function (x) { return x.Name === options.graph; });
            _.remove(graph.Points, function (x) { return x.name === options.nodeName; });
        }
    }
};
var _a = getStoreAccessors("graph"), read = _a.read, commit = _a.commit;
export var readGraph = read(graphModule.getters.getGraph);
export var readGraphCount = read(graphModule.getters.graphCount);
export var getSyncfusionGraphByName = read(graphModule.getters.getSyncfusionGraphByName);
export var getSyncfusiongGraphByGraph = read(graphModule.getters.getSyncfusiongGraphByGraph);
export var getCharacteristicsList = read(graphModule.getters.getCharacteristicsList);
export var getRoles = read(graphModule.getters.getRoles);
export var addGraph = commit(graphModule.mutations.addGraph);
export var addPoint = commit(graphModule.mutations.addPoint);
export var addDependency = commit(graphModule.mutations.addDependency);
export var changeNodeProperty = commit(graphModule.mutations.changeNodeProperty);
export var removeConnection = commit(graphModule.mutations.removeConnection);
export var removeNode = commit(graphModule.mutations.removeNode);
//# sourceMappingURL=data:application/json;base64,